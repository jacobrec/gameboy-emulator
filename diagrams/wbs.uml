@startwbs
* PWA Gameboy Emulator
** Application
*** FR1 - APP.PWA
**** Design and build user interface
***** Create button interface
***** Create screen interface
***** Create audio interface
*** FR2 - App.Delete
**** Design and build user interface
***** Create button to delete ROM data
**** Remove save state data from browser
***** Clear data stored in browser
*** FR3 - App.Upload
**** Design and build user interface
***** Create button to receive ROM file as input
**** Receive input from browser to take in a ROM file
***** Load ROM file into emulator memory
** Quality of life
*** FR4 - Extra.Mute
**** Add mute toggle interface
**** Stop emulator from playing sound
*** FR5 - Extra.Save
**** Add save button interface
**** Save game into browser
***** Serialize game state
***** Store serialized game state in browser
*** FR6 - Extra.Load
**** Add load button interface
**** Receive saved state data input from browser
***** Deserialize game state
***** Load previous save state into emulator memory
** Emulator Controls
*** FR7 - Controls.Touchpad
**** Design touchpad interface
**** Handle touchpad events when they are triggered
***** Read in touchpad events and convert them into instructions for emulator
*** FR8 - Controls.CustomKeymap
**** Design custom keymap interface
**** Let user select specific action for specific keypress
*** FR9 - Controls.CustomTouchpad
**** Design custom touchpad interface
**** Let user decide the position of the on screen button pad
***** Let user enable custom touchpad interface
***** Let user drag touchpad to new position on screen
** CPU
*** FR10 - CPU.Register
**** Create the 8-bit CPU registers
**** Create the 16-bit CPU, SP and PC registers
*** FR11 - CPU.LoadAndStoreOpcodes
**** Create direct, indirect and immediate load operations for 8-bit registers
**** Create direct, indirect and immediate load operations for 16-bit registers
*** FR12 - CPU.ArithmeticOpCodes
**** Create arithmetic operations for 8-bit registers
**** Create arithmetic operations for 16-bit registers
*** FR13 - CPU.StackOperations
**** Create stack operations
***** Create push, pop, load, and store stack pointer operations
*** FR14 - CPU.BitShiftAndRotate
**** Create 8-bit shift, bit set, bit reset and register rotate operations
*** FR15 - CPU.ControlFlowOperations
**** Create jump, call and return operations for 8-bit reigsters
**** Create jump, call and return operations for 16-bit reigsters
*** FR16 - CPU.MiscellaneousOperations
**** Create carry flag set/clear operations
**** Create NOP, halt, stop, reset, swap nibble operations
**** Create operations for enabling and disabling interrupts
*** FR17 - CPU.Speed
**** Create CPU clock
***** Ensure clock runs at 4MHz
** PPU
*** FR18 - PPU.Background
**** Draw background tiles to screen
**** Ensure background layer is behind all other layers
**** Ensure background layer does not support transparency
*** FR19 - PPU.Scrolling
**** Add Scroll registers
**** Enable scrolling on both X and Y Axis
**** Ensure scrolling is checked after each line
*** FR20 - PPU.Window
**** Render a non moving window layer to the screen
**** Ensure window layer is ontop of all layers
**** Add a window layer render switch to make it easy to enable or disable the window
*** FR21 - PPU.Sprites
**** Render 10 sprites per line, and if there's more in a line don't bother rendering them
**** Render 40 sprites per frame, and if there's more in a line don't bother rendering
**** Enable globally configurable 8x16 or 8x8 sprites
*** FR22 - PPU.Timing
**** Ensure OAM scan takes correct length of time
**** Ensure H-Blank takes correct length of time (this is a variable length)
**** Call V-BLANK appropriately
**** Run correct number of PPU Cycles per CPU Cycle
**** Ensure one frame happens at exactly 59.7Hz
*** FR23 - PPU.Palettes
**** Create configurable color palettes that map to colors 1-4 or transparency
**** Ensure each palette maps to ARGB32 colors for easy of displaying
** APU
*** FR24 - APU.Channels
**** Create 2 wave generator channels
**** Create a waveram channel
**** Create a noise generator
*** FR25 - APU.Terminals
**** The terminals should produce the left and right sound data
**** Convert from GB memory to data which is easier to play
*** FR26 - APU.Registers
**** Create the APU Registers
**** Memory map their location so they are readable and writable from the CPU
**** Control the 4 channels
**** Control the 2 terminals from these registers
*** FR27 - APU.WaveRAM
**** Create read and writable memory for the waveform RAM
**** Produce sound data from the waveform RAM
** Interrupt Controller
*** FR28 - Interrupt.Flag
**** Create interrupt enable, disable flags
**** Create the instructions that can set and clear the flags
**** Ensure interrupts are only called when allowed
*** FR29 - Interrupt.Handle
**** Create an interrupt vector mapped to specific points in memory
**** Trigger an interrupt whenever the JoyPad is pressed
**** Create an interrupt timer
**** Trigger an interrupt whenever the timer overflows
**** Trigger V-BLANK, and LCD STAT interrupts from the PPU
@endwbs
